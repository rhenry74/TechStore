@page "/product/{productId}/view"
@inject HttpClient http
@inject NavigationManager navigation

@if (product == null)
{
    <p>Loading...</p>
}
else
{
    <BSCard CardType="CardType.Card">
        <BSCard CardType="CardType.Header">This is FirmWareHouse</BSCard>
        <BSCard CardType="CardType.Body">
            <BSContainer>
                <BSRow>
                    <BSCol>
                        <BSCarousel HasControls HasIndicators>
                            <BSCarouselItem>
                                <BSImage Source="Images/celest_dia1.jpg"></BSImage>
                            </BSCarouselItem>
                            <BSCarouselItem>
                                <BSImage Source="Images/celest_dia2.jpg"></BSImage>
                            </BSCarouselItem>
                        </BSCarousel>
                    </BSCol>
                    <BSCol>
                        <BSCard CardType="CardType.Title">@product.Title</BSCard>
                        <BSCard CardType="CardType.Subtitle">@product.Description</BSCard>
                        <BSCard CardType="CardType.Title">Key Features:</BSCard>
                        <BSListGroup>
                        @foreach (var bullit in product.Bullits.OrderBy(b => b.Order))
                        {
                            <BSListGroupItem><BSBadge Color="BSColor.Light" IsPill>-   </BSBadge>@bullit.Text</BSListGroupItem>
                        }
                        </BSListGroup>
                    </BSCol>
                </BSRow>
            </BSContainer>
            <BSNav IsTabs="true">
                <BSNavItem>
                    <TabLabel>Parts List</TabLabel>
                    <TabContent>

                    </TabContent>
                </BSNavItem>
                <BSNavItem>
                    <TabLabel>Resources</TabLabel>
                    <TabContent>
                        <BSTable IsStriped="true">
                            <BSTHead>
                                <BSTR>
                                    <BSTD>#</BSTD>
                                    <BSTD>Name</BSTD>
                                    <BSTD>Description</BSTD>
                                    <BSTD>Link</BSTD>
                                </BSTR>
                            </BSTHead>
                            <BSTR>
                            @foreach (var resource in product.Artifacts.OrderBy(a => a.Order))
                            {
                                    <BSTD><BSBadge Color="BSColor.Light" IsPill>-   </BSBadge></BSTD>
                                    <BSTD><BSCard CardType="CardType.Text">@resource.Name</BSCard></BSTD>
                                    <BSTD><BSCard CardType="CardType.Text">@resource.Description</BSCard></BSTD>
                                    <BSTD><BSLink IsButton Url="http://www.google.com"><BSBadge Color="BSColor.Light" IsPill>www</BSBadge></BSLink></BSTD>
                            }
                            </BSTR>
                        </BSTable>
                    </TabContent>
                </BSNavItem>
            </BSNav>
        </BSCard>
    </BSCard>

}

@code {

    private bool showFileModal;

    private ArtifactFileInfo artifactInfo = new ArtifactFileInfo();

    private Product product;

    [Parameter] public string ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ProductId == "x")
        {
            product = new Product();
        }
        else
        {
            var products = await http.GetFromJsonAsync<IEnumerable<Product>>("api/products");
            product = products.First(p => p.id == ProductId);
        }
    }

    private void AddBullit()
    {
        var newBullit = new Bullit();
        newBullit.Order = product.Bullits.Count() + 1;
        product.Bullits.Add(newBullit);
    }

    private void DeleteBullit(Bullit bullit)
    {
        product.Bullits.Remove(bullit);
    }

    private void AddArtifact()
    {
        var item = new Artifact();
        item.Order = product.Artifacts.Count() + 1;
        product.Artifacts.Add(item);
    }

    private void DeleteArtifact(Artifact item)
    {
        product.Artifacts.Remove(item);
    }

    private void UploadArtifact(Artifact item)
    {
        // Shows the popup at the center of the screen
        showFileModal = true;
        artifactInfo.Artifact = item;
    }

    private void CancelProduct()
    {
        navigation.NavigateTo("/");
    }

    private async Task Save()
    {
        if (product.id == null)
        {
            await http.PostAsJsonAsync("api/products", product);
        }
        else
        {
            await http.PutAsJsonAsync("api/products", product);
        }
        //navigation.NavigateTo("/");
    }

    private void CloseFileModal()
    {
        showFileModal = false;
    }

    private async Task FileFromModal()
    {
        showFileModal = false;
        artifactInfo.Artifact.Uri = artifactInfo.Key;
        artifactInfo.Artifact.FileName = artifactInfo.FileName;
        await Save();
    }
}